package main

import (
	"encoding/json"
	"log"
	"net/http"
	_ "net/http/pprof"
)

func main() {
	http.HandleFunc("/sort", sorting)
	log.Printf("Serving on port 8080...")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func sorting(w http.ResponseWriter, r *http.Request) {
	req := r.Body

	var sl []int
	err := json.NewDecoder(req).Decode(&sl)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		req.Close()
		return
	}

	req.Close()
	bubbleSort(sl)
	w.WriteHeader(http.StatusOK)
}

func bubbleSort(sl []int) {
	sorts := false

	for !sorts {
		sorts = true
		val1 := sl[0]

		for i := 1; i < len(sl); i++ {
			val2 := sl[i]
			if val1 > val2 {
				sl[i], sl[i-1] = sl[i-1], sl[i]
				sorts = false
			} else {
				val1 = val2
			}
		}
	}

	stubFunc(sl)
}

func stubFunc(sl []int) {
	for i, s := range sl {
		sl[i] = s * 2
	}
}


package main

import (
	"bytes"
	"encoding/json"
	"log"
	"math/rand"
	"net/http"
	"time"
)

func main() {
	s := seed()
	sl := createForBubble(s)

	for {
		err := load(sl)
		if err != nil {
			log.Fatalf("we have an error: %v", err)
		}
	}
}

func load(sl []int) error {
	//s := seed()
	//sl := createForBubble(s)

	b, err := json.Marshal(sl)
	if err != nil {
		return err
	}

	client := http.Client{}
	request, err := http.NewRequest("POST", "http://localhost:8080/sort", bytes.NewBuffer(b))
	if err != nil {
		return err
	}

	_, err = client.Do(request)
	if err != nil {
		return err
	}

	return nil
}

func seed() rand.Source {
	return rand.NewSource(time.Now().UnixNano())
}

func createForBubble(s rand.Source) []int {
	newSl := make([]int, 0)

	for i := 0; i < 10000; i++ {
		n := rand.New(s).Int()
		newSl = append(newSl, n)
	}
	return newSl
}


package main

import (
	"testing"
)

func BenchmarkLoad(b *testing.B) {
	s := seed()
	sl := createForBubble(s)

	for i := 0; i < b.N; i++ {
		if err := load(sl); err != nil {
			b.Errorf("generateLoad got err %v want nil", err)
		}
	}
}
